<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="19" passed="16" failed="3" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-07-12T03:27:38 GMT-07:00" name="Parabank Test Suite" finished-at="2025-07-12T03:29:02 GMT-07:00" duration-ms="84024">
    <groups>
    </groups>
    <test started-at="2025-07-12T03:27:38 GMT-07:00" name="CrossBrowserTests" finished-at="2025-07-12T03:29:02 GMT-07:00" duration-ms="84024">
      <class name="tests.RequestLoanTest">
        <test-method is-config="true" signature="startLog()[pri:0, instance:tests.RequestLoanTest@7d9d0818]" started-at="2025-07-12T03:28:57 GMT-07:00" name="startLog" finished-at="2025-07-12T03:28:57 GMT-07:00" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startLog -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.RequestLoanTest@7d9d0818]" started-at="2025-07-12T03:28:57 GMT-07:00" name="setUp" finished-at="2025-07-12T03:28:57 GMT-07:00" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="createExtentTest(java.lang.reflect.Method)[pri:0, instance:tests.RequestLoanTest@7d9d0818]" started-at="2025-07-12T03:28:57 GMT-07:00" name="createExtentTest" finished-at="2025-07-12T03:28:57 GMT-07:00" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.RequestLoanTest.testLoanExceedingLimit()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createExtentTest -->
        <test-method signature="testLoanExceedingLimit()[pri:0, instance:tests.RequestLoanTest@7d9d0818]" started-at="2025-07-12T03:28:57 GMT-07:00" name="testLoanExceedingLimit" finished-at="2025-07-12T03:28:58 GMT-07:00" duration-ms="751" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoanExceedingLimit -->
        <test-method is-config="true" signature="captureTestResult(org.testng.ITestResult)[pri:0, instance:tests.RequestLoanTest@7d9d0818]" started-at="2025-07-12T03:28:58 GMT-07:00" name="captureTestResult" finished-at="2025-07-12T03:28:58 GMT-07:00" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testLoanExceedingLimit status=SUCCESS method=RequestLoanTest.testLoanExceedingLimit()[pri:0, instance:tests.RequestLoanTest@7d9d0818] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureTestResult -->
        <test-method signature="testMissingLoanDetails()[pri:0, instance:tests.RequestLoanTest@7d9d0818]" started-at="2025-07-12T03:28:58 GMT-07:00" name="testMissingLoanDetails" finished-at="2025-07-12T03:28:58 GMT-07:00" duration-ms="688" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMissingLoanDetails -->
        <test-method is-config="true" signature="createExtentTest(java.lang.reflect.Method)[pri:0, instance:tests.RequestLoanTest@7d9d0818]" started-at="2025-07-12T03:28:58 GMT-07:00" name="createExtentTest" finished-at="2025-07-12T03:28:58 GMT-07:00" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.RequestLoanTest.testMissingLoanDetails()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createExtentTest -->
        <test-method is-config="true" signature="captureTestResult(org.testng.ITestResult)[pri:0, instance:tests.RequestLoanTest@7d9d0818]" started-at="2025-07-12T03:28:58 GMT-07:00" name="captureTestResult" finished-at="2025-07-12T03:28:58 GMT-07:00" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testMissingLoanDetails status=SUCCESS method=RequestLoanTest.testMissingLoanDetails()[pri:0, instance:tests.RequestLoanTest@7d9d0818] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureTestResult -->
        <test-method is-config="true" signature="createExtentTest(java.lang.reflect.Method)[pri:0, instance:tests.RequestLoanTest@7d9d0818]" started-at="2025-07-12T03:28:58 GMT-07:00" name="createExtentTest" finished-at="2025-07-12T03:28:58 GMT-07:00" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.RequestLoanTest.testValidLoanRequest()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createExtentTest -->
        <test-method signature="testValidLoanRequest()[pri:0, instance:tests.RequestLoanTest@7d9d0818]" started-at="2025-07-12T03:28:58 GMT-07:00" name="testValidLoanRequest" finished-at="2025-07-12T03:28:59 GMT-07:00" duration-ms="691" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidLoanRequest -->
        <test-method is-config="true" signature="captureTestResult(org.testng.ITestResult)[pri:0, instance:tests.RequestLoanTest@7d9d0818]" started-at="2025-07-12T03:28:59 GMT-07:00" name="captureTestResult" finished-at="2025-07-12T03:28:59 GMT-07:00" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testValidLoanRequest status=SUCCESS method=RequestLoanTest.testValidLoanRequest()[pri:0, instance:tests.RequestLoanTest@7d9d0818] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureTestResult -->
        <test-method is-config="true" signature="endLog()[pri:0, instance:tests.RequestLoanTest@7d9d0818]" started-at="2025-07-12T03:28:59 GMT-07:00" name="endLog" finished-at="2025-07-12T03:28:59 GMT-07:00" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endLog -->
      </class> <!-- tests.RequestLoanTest -->
      <class name="tests.LoginTest">
        <test-method is-config="true" signature="setupSuite(java.lang.String)[pri:0, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:27:23 GMT-07:00" name="setupSuite" finished-at="2025-07-12T03:27:38 GMT-07:00" duration-ms="15299" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupSuite -->
        <test-method is-config="true" signature="startExtentReport()[pri:0, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:27:38 GMT-07:00" name="startExtentReport" finished-at="2025-07-12T03:27:38 GMT-07:00" depends-on-methods="base.TestBaseSuite.setupSuite" duration-ms="224" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startExtentReport -->
        <test-method is-config="true" signature="startLog()[pri:0, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:27:38 GMT-07:00" name="startLog" finished-at="2025-07-12T03:27:38 GMT-07:00" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startLog -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:27:38 GMT-07:00" name="setUp" finished-at="2025-07-12T03:27:38 GMT-07:00" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="createExtentTest(java.lang.reflect.Method)[pri:0, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:27:38 GMT-07:00" name="createExtentTest" finished-at="2025-07-12T03:27:38 GMT-07:00" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTest.loginWithInvalidPassword()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createExtentTest -->
        <test-method signature="loginWithInvalidPassword()[pri:1, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:27:38 GMT-07:00" name="loginWithInvalidPassword" finished-at="2025-07-12T03:27:50 GMT-07:00" duration-ms="11882" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithInvalidPassword -->
        <test-method is-config="true" signature="captureTestResult(org.testng.ITestResult)[pri:0, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:27:50 GMT-07:00" name="captureTestResult" finished-at="2025-07-12T03:27:50 GMT-07:00" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginWithInvalidPassword status=SUCCESS method=LoginTest.loginWithInvalidPassword()[pri:1, instance:tests.LoginTest@710c2b53] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureTestResult -->
        <test-method is-config="true" signature="createExtentTest(java.lang.reflect.Method)[pri:0, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:27:50 GMT-07:00" name="createExtentTest" finished-at="2025-07-12T03:27:50 GMT-07:00" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTest.loginWithUnregisteredUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createExtentTest -->
        <test-method signature="loginWithUnregisteredUser()[pri:2, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:27:50 GMT-07:00" name="loginWithUnregisteredUser" finished-at="2025-07-12T03:28:01 GMT-07:00" duration-ms="10974" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithUnregisteredUser -->
        <test-method is-config="true" signature="captureTestResult(org.testng.ITestResult)[pri:0, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:28:01 GMT-07:00" name="captureTestResult" finished-at="2025-07-12T03:28:01 GMT-07:00" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginWithUnregisteredUser status=SUCCESS method=LoginTest.loginWithUnregisteredUser()[pri:2, instance:tests.LoginTest@710c2b53] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureTestResult -->
        <test-method signature="loginWithEmptyFields()[pri:3, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:28:01 GMT-07:00" name="loginWithEmptyFields" finished-at="2025-07-12T03:28:14 GMT-07:00" duration-ms="12979" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithEmptyFields -->
        <test-method is-config="true" signature="createExtentTest(java.lang.reflect.Method)[pri:0, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:28:01 GMT-07:00" name="createExtentTest" finished-at="2025-07-12T03:28:01 GMT-07:00" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTest.loginWithEmptyFields() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createExtentTest -->
        <test-method is-config="true" signature="captureTestResult(org.testng.ITestResult)[pri:0, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:28:14 GMT-07:00" name="captureTestResult" finished-at="2025-07-12T03:28:14 GMT-07:00" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginWithEmptyFields status=SUCCESS method=LoginTest.loginWithEmptyFields()[pri:3, instance:tests.LoginTest@710c2b53] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureTestResult -->
        <test-method is-config="true" signature="createExtentTest(java.lang.reflect.Method)[pri:0, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:28:14 GMT-07:00" name="createExtentTest" finished-at="2025-07-12T03:28:14 GMT-07:00" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTest.loginWithInvalidEmailFormat() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createExtentTest -->
        <test-method signature="loginWithInvalidEmailFormat()[pri:4, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:28:14 GMT-07:00" name="loginWithInvalidEmailFormat" finished-at="2025-07-12T03:28:27 GMT-07:00" duration-ms="12632" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithInvalidEmailFormat -->
        <test-method is-config="true" signature="captureTestResult(org.testng.ITestResult)[pri:0, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:28:27 GMT-07:00" name="captureTestResult" finished-at="2025-07-12T03:28:27 GMT-07:00" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginWithInvalidEmailFormat status=SUCCESS method=LoginTest.loginWithInvalidEmailFormat()[pri:4, instance:tests.LoginTest@710c2b53] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureTestResult -->
        <test-method signature="loginWithValidCredentials()[pri:5, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:28:27 GMT-07:00" name="loginWithValidCredentials" finished-at="2025-07-12T03:28:38 GMT-07:00" duration-ms="10758" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithValidCredentials -->
        <test-method is-config="true" signature="createExtentTest(java.lang.reflect.Method)[pri:0, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:28:27 GMT-07:00" name="createExtentTest" finished-at="2025-07-12T03:28:27 GMT-07:00" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTest.loginWithValidCredentials()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createExtentTest -->
        <test-method is-config="true" signature="captureTestResult(org.testng.ITestResult)[pri:0, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:28:38 GMT-07:00" name="captureTestResult" finished-at="2025-07-12T03:28:38 GMT-07:00" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginWithValidCredentials status=SUCCESS method=LoginTest.loginWithValidCredentials()[pri:5, instance:tests.LoginTest@710c2b53] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureTestResult -->
        <test-method is-config="true" signature="endLog()[pri:0, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:28:38 GMT-07:00" name="endLog" finished-at="2025-07-12T03:28:38 GMT-07:00" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endLog -->
        <test-method is-config="true" signature="flushReport()[pri:0, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:29:02 GMT-07:00" name="flushReport" finished-at="2025-07-12T03:29:03 GMT-07:00" duration-ms="776" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flushReport -->
        <test-method is-config="true" signature="teardownSuite()[pri:0, instance:tests.LoginTest@710c2b53]" started-at="2025-07-12T03:29:03 GMT-07:00" name="teardownSuite" finished-at="2025-07-12T03:29:03 GMT-07:00" depends-on-methods="base.BaseTest.flushReport" duration-ms="223" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardownSuite -->
      </class> <!-- tests.LoginTest -->
      <class name="tests.CustomerSupportTest">
        <test-method is-config="true" signature="startLog()[pri:0, instance:tests.CustomerSupportTest@221a3fa4]" started-at="2025-07-12T03:28:59 GMT-07:00" name="startLog" finished-at="2025-07-12T03:28:59 GMT-07:00" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startLog -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.CustomerSupportTest@221a3fa4]" started-at="2025-07-12T03:28:59 GMT-07:00" name="setUp" finished-at="2025-07-12T03:28:59 GMT-07:00" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testSubmitFormWithEmptyFields()[pri:0, instance:tests.CustomerSupportTest@221a3fa4]" started-at="2025-07-12T03:28:59 GMT-07:00" name="testSubmitFormWithEmptyFields" finished-at="2025-07-12T03:29:00 GMT-07:00" duration-ms="1216" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubmitFormWithEmptyFields -->
        <test-method is-config="true" signature="createExtentTest(java.lang.reflect.Method)[pri:0, instance:tests.CustomerSupportTest@221a3fa4]" started-at="2025-07-12T03:28:59 GMT-07:00" name="createExtentTest" finished-at="2025-07-12T03:28:59 GMT-07:00" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.CustomerSupportTest.testSubmitFormWithEmptyFields()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createExtentTest -->
        <test-method is-config="true" signature="captureTestResult(org.testng.ITestResult)[pri:0, instance:tests.CustomerSupportTest@221a3fa4]" started-at="2025-07-12T03:29:00 GMT-07:00" name="captureTestResult" finished-at="2025-07-12T03:29:00 GMT-07:00" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testSubmitFormWithEmptyFields status=SUCCESS method=CustomerSupportTest.testSubmitFormWithEmptyFields()[pri:0, instance:tests.CustomerSupportTest@221a3fa4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureTestResult -->
        <test-method signature="testSubmitFormWithValidDetails()[pri:0, instance:tests.CustomerSupportTest@221a3fa4]" started-at="2025-07-12T03:29:00 GMT-07:00" name="testSubmitFormWithValidDetails" finished-at="2025-07-12T03:29:01 GMT-07:00" duration-ms="1164" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubmitFormWithValidDetails -->
        <test-method is-config="true" signature="createExtentTest(java.lang.reflect.Method)[pri:0, instance:tests.CustomerSupportTest@221a3fa4]" started-at="2025-07-12T03:29:00 GMT-07:00" name="createExtentTest" finished-at="2025-07-12T03:29:00 GMT-07:00" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.CustomerSupportTest.testSubmitFormWithValidDetails()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createExtentTest -->
        <test-method is-config="true" signature="captureTestResult(org.testng.ITestResult)[pri:0, instance:tests.CustomerSupportTest@221a3fa4]" started-at="2025-07-12T03:29:01 GMT-07:00" name="captureTestResult" finished-at="2025-07-12T03:29:01 GMT-07:00" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testSubmitFormWithValidDetails status=SUCCESS method=CustomerSupportTest.testSubmitFormWithValidDetails()[pri:0, instance:tests.CustomerSupportTest@221a3fa4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureTestResult -->
        <test-method is-config="true" signature="createExtentTest(java.lang.reflect.Method)[pri:0, instance:tests.CustomerSupportTest@221a3fa4]" started-at="2025-07-12T03:29:01 GMT-07:00" name="createExtentTest" finished-at="2025-07-12T03:29:01 GMT-07:00" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.CustomerSupportTest.testVerifySuccessMessage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createExtentTest -->
        <test-method signature="testVerifySuccessMessage()[pri:0, instance:tests.CustomerSupportTest@221a3fa4]" started-at="2025-07-12T03:29:01 GMT-07:00" name="testVerifySuccessMessage" finished-at="2025-07-12T03:29:02 GMT-07:00" duration-ms="1053" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifySuccessMessage -->
        <test-method is-config="true" signature="captureTestResult(org.testng.ITestResult)[pri:0, instance:tests.CustomerSupportTest@221a3fa4]" started-at="2025-07-12T03:29:02 GMT-07:00" name="captureTestResult" finished-at="2025-07-12T03:29:02 GMT-07:00" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testVerifySuccessMessage status=SUCCESS method=CustomerSupportTest.testVerifySuccessMessage()[pri:0, instance:tests.CustomerSupportTest@221a3fa4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureTestResult -->
        <test-method is-config="true" signature="endLog()[pri:0, instance:tests.CustomerSupportTest@221a3fa4]" started-at="2025-07-12T03:29:02 GMT-07:00" name="endLog" finished-at="2025-07-12T03:29:02 GMT-07:00" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endLog -->
      </class> <!-- tests.CustomerSupportTest -->
      <class name="tests.TransactionSearchTest">
        <test-method is-config="true" signature="startLog()[pri:0, instance:tests.TransactionSearchTest@5b247367]" started-at="2025-07-12T03:28:53 GMT-07:00" name="startLog" finished-at="2025-07-12T03:28:53 GMT-07:00" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startLog -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.TransactionSearchTest@5b247367]" started-at="2025-07-12T03:28:53 GMT-07:00" name="setUp" finished-at="2025-07-12T03:28:53 GMT-07:00" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testSearchByAmount()[pri:0, instance:tests.TransactionSearchTest@5b247367]" started-at="2025-07-12T03:28:53 GMT-07:00" name="testSearchByAmount" finished-at="2025-07-12T03:28:54 GMT-07:00" duration-ms="1137" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSearchByAmount -->
        <test-method is-config="true" signature="createExtentTest(java.lang.reflect.Method)[pri:0, instance:tests.TransactionSearchTest@5b247367]" started-at="2025-07-12T03:28:53 GMT-07:00" name="createExtentTest" finished-at="2025-07-12T03:28:53 GMT-07:00" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.TransactionSearchTest.testSearchByAmount()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createExtentTest -->
        <test-method is-config="true" signature="captureTestResult(org.testng.ITestResult)[pri:0, instance:tests.TransactionSearchTest@5b247367]" started-at="2025-07-12T03:28:54 GMT-07:00" name="captureTestResult" finished-at="2025-07-12T03:28:54 GMT-07:00" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testSearchByAmount status=SUCCESS method=TransactionSearchTest.testSearchByAmount()[pri:0, instance:tests.TransactionSearchTest@5b247367] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureTestResult -->
        <test-method signature="testSearchByDate()[pri:0, instance:tests.TransactionSearchTest@5b247367]" started-at="2025-07-12T03:28:54 GMT-07:00" name="testSearchByDate" finished-at="2025-07-12T03:28:56 GMT-07:00" duration-ms="1186" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSearchByDate -->
        <test-method is-config="true" signature="createExtentTest(java.lang.reflect.Method)[pri:0, instance:tests.TransactionSearchTest@5b247367]" started-at="2025-07-12T03:28:54 GMT-07:00" name="createExtentTest" finished-at="2025-07-12T03:28:54 GMT-07:00" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.TransactionSearchTest.testSearchByDate()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createExtentTest -->
        <test-method is-config="true" signature="captureTestResult(org.testng.ITestResult)[pri:0, instance:tests.TransactionSearchTest@5b247367]" started-at="2025-07-12T03:28:56 GMT-07:00" name="captureTestResult" finished-at="2025-07-12T03:28:56 GMT-07:00" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testSearchByDate status=SUCCESS method=TransactionSearchTest.testSearchByDate()[pri:0, instance:tests.TransactionSearchTest@5b247367] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureTestResult -->
        <test-method is-config="true" signature="createExtentTest(java.lang.reflect.Method)[pri:0, instance:tests.TransactionSearchTest@5b247367]" started-at="2025-07-12T03:28:56 GMT-07:00" name="createExtentTest" finished-at="2025-07-12T03:28:56 GMT-07:00" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.TransactionSearchTest.testSearchByDateRange()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createExtentTest -->
        <test-method signature="testSearchByDateRange()[pri:0, instance:tests.TransactionSearchTest@5b247367]" started-at="2025-07-12T03:28:56 GMT-07:00" name="testSearchByDateRange" finished-at="2025-07-12T03:28:56 GMT-07:00" duration-ms="424" status="FAIL">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//div//input[@id='fromDate']"}
  (Session info: chrome=137.0.7151.122)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [fe628b1c61e3eaf3babef6e6f69e9fef, findElement {using=xpath, value=//div//input[@id='fromDate']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 137.0.7151.122, chrome: {chromedriverVersion: 137.0.7151.119 (e0ac9d12dff..., userDataDir: C:\Users\smart\AppData\Loca...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:59285}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:59285/devtoo..., se:cdpVersion: 137.0.7151.122, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: fe628b1c61e3eaf3babef6e6f69e9fef]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//div//input[@id='fromDate']"}
  (Session info: chrome=137.0.7151.122)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [fe628b1c61e3eaf3babef6e6f69e9fef, findElement {using=xpath, value=//div//input[@id='fromDate']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 137.0.7151.122, chrome: {chromedriverVersion: 137.0.7151.119 (e0ac9d12dff..., userDataDir: C:\Users\smart\AppData\Loca...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:59285}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:59285/devtoo..., se:cdpVersion: 137.0.7151.122, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: fe628b1c61e3eaf3babef6e6f69e9fef
at jdk.internal.reflect.GeneratedConstructorAccessor11.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at pages.TransactionSearchPage.searchByDateRange(TransactionSearchPage.java:60)
at tests.TransactionSearchTest.testSearchByDateRange(TransactionSearchTest.java:56)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSearchByDateRange -->
        <test-method is-config="true" signature="captureTestResult(org.testng.ITestResult)[pri:0, instance:tests.TransactionSearchTest@5b247367]" started-at="2025-07-12T03:28:56 GMT-07:00" name="captureTestResult" finished-at="2025-07-12T03:28:56 GMT-07:00" duration-ms="171" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testSearchByDateRange status=FAILURE method=TransactionSearchTest.testSearchByDateRange()[pri:0, instance:tests.TransactionSearchTest@5b247367] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureTestResult -->
        <test-method signature="testSearchByTransactionId()[pri:0, instance:tests.TransactionSearchTest@5b247367]" started-at="2025-07-12T03:28:56 GMT-07:00" name="testSearchByTransactionId" finished-at="2025-07-12T03:28:57 GMT-07:00" duration-ms="445" status="FAIL">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//input[@id='transactionId']"}
  (Session info: chrome=137.0.7151.122)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [fe628b1c61e3eaf3babef6e6f69e9fef, findElement {using=xpath, value=//input[@id='transactionId']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 137.0.7151.122, chrome: {chromedriverVersion: 137.0.7151.119 (e0ac9d12dff..., userDataDir: C:\Users\smart\AppData\Loca...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:59285}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:59285/devtoo..., se:cdpVersion: 137.0.7151.122, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: fe628b1c61e3eaf3babef6e6f69e9fef]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//input[@id='transactionId']"}
  (Session info: chrome=137.0.7151.122)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.10'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [fe628b1c61e3eaf3babef6e6f69e9fef, findElement {using=xpath, value=//input[@id='transactionId']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 137.0.7151.122, chrome: {chromedriverVersion: 137.0.7151.119 (e0ac9d12dff..., userDataDir: C:\Users\smart\AppData\Loca...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:59285}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:59285/devtoo..., se:cdpVersion: 137.0.7151.122, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: fe628b1c61e3eaf3babef6e6f69e9fef
at jdk.internal.reflect.GeneratedConstructorAccessor11.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at pages.TransactionSearchPage.searchByTransactionId(TransactionSearchPage.java:48)
at tests.TransactionSearchTest.testSearchByTransactionId(TransactionSearchTest.java:26)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSearchByTransactionId -->
        <test-method is-config="true" signature="createExtentTest(java.lang.reflect.Method)[pri:0, instance:tests.TransactionSearchTest@5b247367]" started-at="2025-07-12T03:28:56 GMT-07:00" name="createExtentTest" finished-at="2025-07-12T03:28:56 GMT-07:00" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.TransactionSearchTest.testSearchByTransactionId()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createExtentTest -->
        <test-method is-config="true" signature="captureTestResult(org.testng.ITestResult)[pri:0, instance:tests.TransactionSearchTest@5b247367]" started-at="2025-07-12T03:28:57 GMT-07:00" name="captureTestResult" finished-at="2025-07-12T03:28:57 GMT-07:00" duration-ms="183" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testSearchByTransactionId status=FAILURE method=TransactionSearchTest.testSearchByTransactionId()[pri:0, instance:tests.TransactionSearchTest@5b247367] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureTestResult -->
        <test-method is-config="true" signature="endLog()[pri:0, instance:tests.TransactionSearchTest@5b247367]" started-at="2025-07-12T03:28:57 GMT-07:00" name="endLog" finished-at="2025-07-12T03:28:57 GMT-07:00" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endLog -->
      </class> <!-- tests.TransactionSearchTest -->
      <class name="tests.AccountTest">
        <test-method is-config="true" signature="startLog()[pri:0, instance:tests.AccountTest@7ce69770]" started-at="2025-07-12T03:28:38 GMT-07:00" name="startLog" finished-at="2025-07-12T03:28:38 GMT-07:00" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startLog -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.AccountTest@7ce69770]" started-at="2025-07-12T03:28:38 GMT-07:00" name="setUp" finished-at="2025-07-12T03:28:38 GMT-07:00" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="createExtentTest(java.lang.reflect.Method)[pri:0, instance:tests.AccountTest@7ce69770]" started-at="2025-07-12T03:28:38 GMT-07:00" name="createExtentTest" finished-at="2025-07-12T03:28:38 GMT-07:00" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.AccountTest.viewCheckingAccountSummary() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createExtentTest -->
        <test-method signature="viewCheckingAccountSummary()[pri:0, instance:tests.AccountTest@7ce69770]" started-at="2025-07-12T03:28:38 GMT-07:00" name="viewCheckingAccountSummary" finished-at="2025-07-12T03:28:42 GMT-07:00" duration-ms="4547" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- viewCheckingAccountSummary -->
        <test-method is-config="true" signature="captureTestResult(org.testng.ITestResult)[pri:0, instance:tests.AccountTest@7ce69770]" started-at="2025-07-12T03:28:42 GMT-07:00" name="captureTestResult" finished-at="2025-07-12T03:28:42 GMT-07:00" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=viewCheckingAccountSummary status=SUCCESS method=AccountTest.viewCheckingAccountSummary()[pri:0, instance:tests.AccountTest@7ce69770] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureTestResult -->
        <test-method signature="viewSavingsAccountSummary()[pri:0, instance:tests.AccountTest@7ce69770]" started-at="2025-07-12T03:28:42 GMT-07:00" name="viewSavingsAccountSummary" finished-at="2025-07-12T03:28:50 GMT-07:00" duration-ms="8185" status="FAIL">
          <exception class="java.util.NoSuchElementException">
            <message>
              <![CDATA[No account found with type: SAVINGS]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.util.NoSuchElementException: No account found with type: SAVINGS
at pages.AccountPage.selectAccountByType(AccountPage.java:61)
at tests.AccountTest.viewSavingsAccountSummary(AccountTest.java:42)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.util.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- viewSavingsAccountSummary -->
        <test-method is-config="true" signature="createExtentTest(java.lang.reflect.Method)[pri:0, instance:tests.AccountTest@7ce69770]" started-at="2025-07-12T03:28:42 GMT-07:00" name="createExtentTest" finished-at="2025-07-12T03:28:42 GMT-07:00" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.AccountTest.viewSavingsAccountSummary() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createExtentTest -->
        <test-method is-config="true" signature="captureTestResult(org.testng.ITestResult)[pri:0, instance:tests.AccountTest@7ce69770]" started-at="2025-07-12T03:28:50 GMT-07:00" name="captureTestResult" finished-at="2025-07-12T03:28:51 GMT-07:00" duration-ms="311" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=viewSavingsAccountSummary status=FAILURE method=AccountTest.viewSavingsAccountSummary()[pri:0, instance:tests.AccountTest@7ce69770] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureTestResult -->
        <test-method is-config="true" signature="endLog()[pri:0, instance:tests.AccountTest@7ce69770]" started-at="2025-07-12T03:28:51 GMT-07:00" name="endLog" finished-at="2025-07-12T03:28:51 GMT-07:00" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endLog -->
      </class> <!-- tests.AccountTest -->
      <class name="tests.FundsTransferTest">
        <test-method is-config="true" signature="startLog()[pri:0, instance:tests.FundsTransferTest@1750fbeb]" started-at="2025-07-12T03:28:51 GMT-07:00" name="startLog" finished-at="2025-07-12T03:28:51 GMT-07:00" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startLog -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:tests.FundsTransferTest@1750fbeb]" started-at="2025-07-12T03:28:51 GMT-07:00" name="setUp" finished-at="2025-07-12T03:28:51 GMT-07:00" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInvalidFundTransfer()[pri:0, instance:tests.FundsTransferTest@1750fbeb]" started-at="2025-07-12T03:28:51 GMT-07:00" name="testInvalidFundTransfer" finished-at="2025-07-12T03:28:52 GMT-07:00" duration-ms="1322" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidFundTransfer -->
        <test-method is-config="true" signature="createExtentTest(java.lang.reflect.Method)[pri:0, instance:tests.FundsTransferTest@1750fbeb]" started-at="2025-07-12T03:28:51 GMT-07:00" name="createExtentTest" finished-at="2025-07-12T03:28:51 GMT-07:00" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.FundsTransferTest.testInvalidFundTransfer()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createExtentTest -->
        <test-method is-config="true" signature="captureTestResult(org.testng.ITestResult)[pri:0, instance:tests.FundsTransferTest@1750fbeb]" started-at="2025-07-12T03:28:52 GMT-07:00" name="captureTestResult" finished-at="2025-07-12T03:28:52 GMT-07:00" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidFundTransfer status=SUCCESS method=FundsTransferTest.testInvalidFundTransfer()[pri:0, instance:tests.FundsTransferTest@1750fbeb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureTestResult -->
        <test-method is-config="true" signature="createExtentTest(java.lang.reflect.Method)[pri:0, instance:tests.FundsTransferTest@1750fbeb]" started-at="2025-07-12T03:28:52 GMT-07:00" name="createExtentTest" finished-at="2025-07-12T03:28:52 GMT-07:00" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.FundsTransferTest.testValidFundTransfer()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createExtentTest -->
        <test-method signature="testValidFundTransfer()[pri:0, instance:tests.FundsTransferTest@1750fbeb]" started-at="2025-07-12T03:28:52 GMT-07:00" name="testValidFundTransfer" finished-at="2025-07-12T03:28:53 GMT-07:00" duration-ms="1179" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidFundTransfer -->
        <test-method is-config="true" signature="captureTestResult(org.testng.ITestResult)[pri:0, instance:tests.FundsTransferTest@1750fbeb]" started-at="2025-07-12T03:28:53 GMT-07:00" name="captureTestResult" finished-at="2025-07-12T03:28:53 GMT-07:00" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testValidFundTransfer status=SUCCESS method=FundsTransferTest.testValidFundTransfer()[pri:0, instance:tests.FundsTransferTest@1750fbeb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- captureTestResult -->
        <test-method is-config="true" signature="endLog()[pri:0, instance:tests.FundsTransferTest@1750fbeb]" started-at="2025-07-12T03:28:53 GMT-07:00" name="endLog" finished-at="2025-07-12T03:28:53 GMT-07:00" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endLog -->
      </class> <!-- tests.FundsTransferTest -->
    </test> <!-- CrossBrowserTests -->
  </suite> <!-- Parabank Test Suite -->
</testng-results>
